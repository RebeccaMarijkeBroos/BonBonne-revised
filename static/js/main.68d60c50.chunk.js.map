{"version":3,"sources":["components/restaurant.jpeg","components/cardModal.js","components/cardList.js","BonBonne.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CardModal","state","open","source","_this","props","openingHours","onOpenModal","setState","onCloseModal","checkHours","hours","checkedHours","undefined","console","log","this","opening_hours","react_default","a","createElement","className","onClick","index_es","onClose","showCloseIcon","styles","modal","height","width","borderRadius","boxShadow","padding","center","name","alt","src","tempImage","rating","priceRange","newAddress","href","website","shortenWebsite","phone_number","React","Component","CardSmall","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","priceCheck","price","priceLevel","splitAdress","address","split","capWebsite","target","SplittedAdress","price_level","splitted","cappedSite","cardModal_CardModal","BonBonne","filterData","event","filteredArray","data","value","filter","item","reset","prevState","restaurants","sortData","sortedArray","concat","sort","b","wildCards","randomArray","usedNumbers","randomNumber","length","Math","floor","random","includes","push","printedArray","map","cardList","key","id","onChange","printContent","Boolean","window","location","hostname","match","ReactDOM","render","src_BonBonne","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68d60c50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/restaurant.e8c28c46.jpeg\";","//jshint esversion:6\r\nimport React from 'react';\r\nimport Modal from 'react-responsive-modal';\r\nimport './card.css';\r\n\r\n//Local placeholder for this.state.source.photo\r\nimport tempImage from './restaurant.jpeg';\r\n\r\n//To display the details of the restaurant I'm using the NPM react-responsive-modal.\r\n//Documentation and instructions can be found here:\r\nexport default class CardModal extends React.Component {\r\n    state = {\r\n      open: false,\r\n      source: this.props.source,\r\n      openingHours: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      var checkedHours = this.checkHours(this.state.source.opening_hours);\r\n      this.setState({openingHours: checkedHours});\r\n    }\r\n\r\n    onOpenModal = () => {\r\n      this.setState({\r\n        open: true\r\n      });\r\n    };\r\n\r\n    onCloseModal = () => {\r\n      this.setState({\r\n        open: false\r\n      });\r\n    };\r\n\r\n    checkHours = (hours) => {\r\n      var checkedHours = [];\r\n      if (hours === undefined || hours === []){\r\n        console.log('no hours!')\r\n        checkedHours = ['Opening hours not available']\r\n      }else {\r\n        checkedHours = hours;\r\n      }\r\n      return checkedHours;\r\n    }\r\n\r\n      render() {\r\n        const {\r\n          open\r\n        } = this.state;\r\n        const modalStyles = {\r\n          modal: {\r\n            height: '500px',\r\n            width: '310px',\r\n            borderRadius: '3px',\r\n            boxShadow: '0px 0px 5px 3px #353535',\r\n            padding: '0'\r\n          }\r\n        };\r\n\r\n        return (\r\n          <div>\r\n          <button className = 'infoButton' onClick = {this.onOpenModal} > INFO < /button>\r\n          <Modal open={open} onClose={this.onCloseModal} showCloseIcon={false} styles={modalStyles}center >\r\n            <div className = 'modalContent'>\r\n              <h2 className = 'modalHeader'>{this.state.source.name} </h2>\r\n              <img className = 'modalImage' alt='tempImage' src={tempImage}/>\r\n              <div className = 'modalText'>\r\n              <div className = 'openingHours'>\r\n                {this.state.openingHours[0]} <br/>\r\n                {this.state.openingHours[1]} <br/>\r\n                {this.state.openingHours[2]} <br/>\r\n                {this.state.openingHours[3]} <br/>\r\n                {this.state.openingHours[4]} <br/>\r\n                {this.state.openingHours[5]} <br/>\r\n                {this.state.openingHours[6]} <br/>\r\n                {this.state.openingHours[7]}\r\n              </div>\r\n              <div className='info'>\r\n                <p className='cardBigH2'>Rating: {this.state.source.rating}</p>\r\n                <p className='cardBigH2'>Price - range: {this.props.priceRange}</p>\r\n                <p className='cardBigH3'>{this.props.newAddress[0]} <br/> {this.props.newAddress[1]}</p>\r\n                <br/>\r\n                <br/>\r\n                <a className='cardBigH3' href={this.state.source.website}>{this.props.shortenWebsite}</a>\r\n                <p className='cardBigH3'>{this.state.source.phone_number}</p>\r\n              </div>\r\n            </div>\r\n              <button open={open} className='closeButton' onClick={this.onCloseModal}>CLOSE</button>\r\n          </div> <\r\n          /Modal > <\r\n          /div>\r\n        );\r\n      }\r\n    }\r\n","//jshint esversion:6\r\nimport React, { Component } from 'react';\r\nimport CardModal from './cardModal.js';\r\nimport './card.css';\r\n\r\n\r\n//Pixabay doesn't allow hotlinking. So I'm using a local placeholder image instead\r\n//Ideally the photo would be accessible with the dot notation: this.state.target.photo\r\nimport tempImage from './restaurant.jpeg';\r\n\r\n// The small card component that gets rendered in a list form\r\nclass CardSmall extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      target: this.props.source,\r\n      SplittedAdress:[],\r\n      priceRange:'',\r\n      shortenWebsite: ''\r\n    };\r\n  }\r\n\r\n//Along with render of the component the price and adress are calculated and stored\r\n  componentDidMount() {\r\n    var priceLevel = this.priceCheck(this.state.target.price_level);\r\n    this.setState({priceRange: priceLevel});\r\n\r\n    var splitted = this.splitAdress(this.state.target.address);\r\n    this.setState({SplittedAdress: splitted});\r\n\r\n    var cappedSite = this.capWebsite(this.state.target.website);\r\n    this.setState({shortenWebsite: cappedSite});\r\n  }\r\n\r\n//function that converts the numeral price-range to text values or displays N.A. if no price range was indicated\r\n  priceCheck = (price) => {\r\n    var priceLevel = '';\r\n\r\n    switch (price) {\r\n      case 1:\r\n      priceLevel ='Low'\r\n      break;\r\n\r\n      case 2:\r\n      priceLevel ='Average'\r\n      break;\r\n\r\n      case 3:\r\n      priceLevel ='High'\r\n      break;\r\n\r\n      default:\r\n      priceLevel ='N.A.'\r\n    }\r\n\r\n    return(priceLevel);\r\n  }\r\n\r\n  //For aesthetic purposes the address string is split up into two parts:\r\n  //Streetname and housenumber (splitted[0])\r\n  //Postcode and city (splitted[1])\r\n  splitAdress = (address) => {\r\n    var splitted = address.split(',');\r\n    return (splitted)\r\n  }\r\n\r\n  //Checks if website is filled, if not returns a placeholder also shortens the displayed link\r\n  capWebsite = (website) => {\r\n    var cappedSite = '';\r\n    if (website === undefined || website === ''){\r\n      cappedSite = 'No website'\r\n    }else {\r\n      cappedSite = website.split('/');\r\n      cappedSite = cappedSite[2];\r\n    }\r\n    return(cappedSite);\r\n  }\r\n\r\n  //JSON object from which this component is created gets passed through it's own modal/detailpage\r\n  //Button to open the modal is included in the CardModal component\r\n  render() {\r\n    return (\r\n\r\n      <div className='cardSmall'>\r\n\r\n        <div className='cardSmallImage'><img className='thumbnail' alt='tempImage' src = { tempImage }/></div>\r\n\r\n        <div className='cardSmallText'>\r\n          <div className='cardSmallHeader'><h2>{ this.state.target.name }</h2></div>\r\n          <div className='cardSmallPar'>\r\n            <p className='cardSmallH3'>Rating: {this.state.target.rating}</p>\r\n            <p className='cardSmallH3'>Price-range: {this.state.priceRange}</p>\r\n            <p className='cardSmallH3'>{this.state.SplittedAdress[0]}<br />{this.state.SplittedAdress[1]}</p>\r\n            <a className='cardSmallH4' href={this.state.shortenWebsite}>{this.state.shortenWebsite}</a>\r\n            <p className='cardSmallH4'>{this.state.target.phone_number}</p>\r\n          </div>\r\n\r\n          <CardModal source={this.state.target} newAddress={this.state.SplittedAdress} priceRange={this.state.priceRange} shortenWebsite={this.state.shortenWebsite}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardSmall;\r\n","//jshint esversion:6\r\nimport React, {Component} from 'react';\r\nimport CardSmall from \"./components/cardList.js\";\r\n//Import JSON file here\r\nimport data from './db.json';\r\n\r\n//The main component containing a mapping function that creates a CardSmall component for each entry in the db.json file\r\nclass BonBonne extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      restaurants: data\r\n    };\r\n  }\r\n\r\n  //OnChange function that filters the data based on values in a dropdown menu\r\n  filterData=(event)=>{\r\n    var filteredArray = data;\r\n    if (event.target.value === 'rating'){\r\n      filteredArray = filteredArray.filter(item => item.rating >= 4);\r\n    }else if (event.target.value === 'price'){\r\n      filteredArray = filteredArray.filter(item => item.price_level === 1);\r\n    }else {\r\n      this.reset();\r\n    }\r\n    //Changes state to the filteredArray\r\n    this.setState((prevState, props) => ({\r\n      restaurants: filteredArray\r\n    }));\r\n  }\r\n\r\n  //Function that resets the printed content to it's original state\r\n  reset=()=>{\r\n    console.log(data);\r\n    this.setState((prevState, props) => ({\r\n      restaurants: data\r\n    }));\r\n  }\r\n\r\n  //OnChange function that sorts the original data\r\n  sortData=(event)=>{\r\n    var sortedArray = [].concat(data);\r\n\r\n    //Checks which option in de dropdown menu was selected and runs the according algorithm\r\n    if (event.target.value === 'name'){\r\n      sortedArray = sortedArray.sort((a, b) => a.name === b.name ? 0 : a.name < b.name ? -1 : 1);\r\n    } else if (event.target.value === 'rating') {\r\n      sortedArray = sortedArray.sort((a, b) => a.rating === b.rating ? 0 : a.rating > b.rating ? -1 : 1);\r\n    } else {\r\n      this.reset();\r\n    }\r\n\r\n    //Changes state to the sortedArray\r\n    this.setState((prevState, props) => ({\r\n      restaurants: sortedArray\r\n    }));\r\n  }\r\n\r\n  //OnClick function that returns 6 random restaurants from the original data file\r\n  wildCards=()=>{\r\n    //To prevent multiple random functions from stacking on top of each other, a reset is done\r\n    this.reset();\r\n    var randomArray = [];\r\n    var usedNumbers = [];\r\n    var randomNumber = 0;\r\n    while (randomArray.length < 6){\r\n      randomNumber = Math.floor((Math.random() * (data.length)));\r\n      //Check if the random number has already been used\r\n      if (usedNumbers.includes(randomNumber)){\r\n        randomNumber = Math.floor((Math.random() * (data.length)));\r\n      }\r\n      else{\r\n        randomArray.push(data[randomNumber]);\r\n        usedNumbers.push(randomNumber);\r\n      }\r\n    }\r\n    this.setState((prevState, props) => ({\r\n      restaurants: randomArray\r\n    }));\r\n  }\r\n\r\n  //Function that takes the array and converts it to divs\r\n  printContent() {\r\n    var printedArray = [];\r\n\r\n    this.state.restaurants.map((source) => {\r\n    printedArray.push(<CardSmall source={source} key={source.id}/>)\r\n    })\r\n\r\n    return (printedArray);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"RestaurantAPI\">\r\n        <header>\r\n          <h1 className='logo'>Bon Bonne</h1>\r\n          <div className='tools'>\r\n            <div className=' extraSpace'>\r\n              Sort by: &nbsp;\r\n              <select value={this.state.value} onChange={this.sortData}>\r\n                <option value=\"\">---</option>\r\n                <option value=\"name\">Name</option>\r\n                <option value=\"rating\">Rating</option>\r\n              </select>\r\n            </div>\r\n            <div className=' extraSpace'>\r\n              Filter on: &nbsp;\r\n              <select value={this.state.value} onChange={this.filterData}>\r\n                <option value=\"\">---</option>\r\n                <option value=\"rating\">rating of 4 or higher</option>\r\n                <option value=\"price\">Bargains</option>\r\n              </select>\r\n            </div>\r\n            <button className='toolButton extraSpace' onClick={this.wildCards}>Random</button>\r\n            <button className='toolButton extraSpace' onClick={this.reset}>Reset</button>\r\n          </div>\r\n        </header>\r\n        <div className='cardRegion'>\r\n          {this.printContent()}\r\n        </div>\r\n          <footer>\r\n            Bon Bonne API by Rebecca Marijke Broos\r\n          </footer>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BonBonne;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BonBonne from './BonBonne';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BonBonne />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}